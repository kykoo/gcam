#!/usr/bin/env python
# coding: utf-8

# # Libraries

# ## socket_client.py

# In[1]:


get_ipython().run_cell_magic('writefile', 'socket_client.py', 'import socket\nimport time\nimport errno\nimport select\nimport logging\n\n#logging.basicConfig(level=logging.DEBUG)\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\nsock = None\n\ndef socket_thread(p, requests):\n\n    returnFlag = False\n    cursor = 0\n    while True:\n        logger.debug(\'starting polling...\')\n        l = p.poll(10000)\n        logger.debug(\'starting polling done...\')\n        if len(l) ==0:\n            logger.debug(\'polling timeout, returning...\')\n            returnFlag = True\n        #logger.debug(\'{}\'.format(l))\n        for t in l:\n            #logger.debug(\'{}\'.format(t))\n            #sock = t[0]\n            event = t[1]\n            if(event & select.POLLERR or event & select.POLLHUP):\n                logger.debug(\'pollerr or pollup\')\n                sock.close()\n                returnFlag = True\n                continue\n            if(event & select.POLLOUT):\n                try:\n                    if cursor ==0:\n                        logger.debug(\'sending data...\')\n                        #sock.send(requests)\n                        #write(sock,requests)\n                        #sock.write(requests)\n                        sock.send(requests.encode())\n                        \n                        # We only want to send one message on this socket, in the future wait only for new incoming messages\n                        p.modify(sock, select.POLLIN | select.POLLHUP | select.POLLERR)\n                        logger.debug(\'sending data done...\')\n                        cursor += 1\n                        continue\n                    else:\n                        pass\n                except:\n                    raise\n                    # pass\n            if(event & select.POLLIN):\n                try:\n                    logger.debug(\'receiving data...\')\n                    r = sock.recv(256)\n                    logger.debug(\'receiving data done...\')\n                    # If recv() returns with 0 the other end closed the connection\n                    if len(r) == 0:\n                        sock.close()\n                        logger.debug(\'len(r)=0, sock.close()\')\n                        returnFlag = True\n                        continue\n                    else:\n                        # Do something with the received data...\n                        logger.debug("Data received: " + str(r))\n                        logger.debug("sock.close() ...")\n                        sock.close()\n                        logger.debug("sock.close() done ...")\n                        returnFlag = True\n                        return r.decode(\'ASCII\')\n                except:\n                    pass\n        if returnFlag is True:\n            break\n    return\n\n\n\ndef request(requests):\n    global sock\n    \n    logger.debug(\'setting up socket...\')\n    # List for storing our sockets\n    socket_list = []\n\n    # Set up the first socket in non-blocking mode\n    sock = socket.socket()\n    sock.setblocking(True)\n    sock.settimeout(10)\n    # s1.setblocking(False)\n    socket_list.append(sock)\n    # # Set up the second socket in non-blocking mode\n    # s2 = socket.socket()\n    # s2.setblocking(False)\n    # socket_list.append(s2)\n\n    # Create a new poll object\n    p = select.poll()\n    # Register the sockets into the poll object, wait for all kind of events\n    p.register(sock, select.POLLIN | select.POLLOUT | select.POLLHUP | select.POLLERR)\n    # p.register(sock, select.POLLIN | select.POLLOUT | select.POLLHUP | select.POLLERR)\n    logger.debug(\'setting up socket done...\')\n\n    for s in socket_list:\n        try:\n            logger.debug(\'connecting to the server...\')\n            out = s.connect(socket.getaddrinfo("192.168.1.51", 6543)[0][-1])\n            logger.debug(out)\n            logger.debug(\'connecting to the server done...\')\n            logger.debug(\'starting socket_thread...\')\n            response = socket_thread(p,requests)\n            logger.debug(\'starting socket_thread done...\')\n            return response\n        except socket.timeout:\n            logger.debug(\'Timeout error occurred...\')\n        except :\n            pass\n    return\n')

